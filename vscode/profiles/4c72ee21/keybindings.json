// Place your key bindings in this file to override the defaultsauto[]
[
    // {
    //     "key": "ctrl+j f",
    //     "command": "go.toggle.test.file",
    //     "when": "editorLangId == 'go'"
    // },
    // {
    //     "key": "ctrl+j p",
    //     "command": "go.test.package",
    //     "when": "editorLangId == 'go'"
    // },
    // {
    //     "key": "ctrl+j s",
    //     "command": "go.test.cursor",
    //     "when": "editorLangId == 'go'"
    // },
    // {
    //     "key": "ctrl+j t",
    //     "command": "go.test.file",
    //     "when": "editorLangId == 'go'"
    // },
    {
        "key": "ctrl+j a",
        "command": "testing.runAll"
    },
    {
        "key": "ctrl+j s",
        "command": "testing.runAtCursor",
        //"when": "editorLangId == 'go'"
    },
    {
        "key": "ctrl+j t",
        "command": "testing.runCurrentFile",
        //"when": "editorLangId == 'go'"
    },
    {
        "key": "ctrl+j l",
        "command": "testing.reRunLastRun",
        //"when": "editorLangId == 'go'"
    },
    // Zig: Run file tests
    {
        "key": "ctrl+j t",
        "command": "zig-language-extras.runFileTests",
        "when": "editorLangId == 'zig'"
    },
    // Zig: Run single test
    {
        "key": "ctrl+j s",
        "command": "zig-language-extras.runSingleTest",
        "when": "editorLangId == 'zig'"
    },
    // Zig: Test workspace
    {
        "key": "ctrl+j w",
        "command": "zig-language-extras.testWorkspace",
        "when": "editorLangId == 'zig'"
    },
    // Zig: Build workspace
    {
        "key": "ctrl+j b",
        "command": "zig-language-extras.buildWorkspace",
        "when": "editorLangId == 'zig'"
    },
    {
        "key": "ctrl+j b",
        "command": "go.build.workspace",
        "when": "editorLangId == 'go'"
    },
    // Rename
    {
        "key": "ctrl+j n",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    // Go to references
    {
        "key": "ctrl+j r",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+j p",
        "command": "editor.action.referenceSearch.trigger"
    },
    {
        "key": "ctrl+j d",
        "command": "editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+j g",
        "command": "magit.status",
    },
    // Reset editor group sizes
    {
        "key": "ctrl+x shift+=",
        "command": "workbench.action.evenEditorWidths"
    },
    // Editor group navigation left/right
    {
        "key": "cmd+[",
        "command": "workbench.action.focusLeftGroup"
    },
    {
        "key": "cmd+]",
        "command": "workbench.action.focusRightGroup"
    },
    // Go to definition
    {
        "key": "alt+.",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "alt+ctrl+.",
        "command": "editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    // Go back
    {
        "key": "alt+,",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "alt+cmd+,",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateBack"
    },
    // Replace
    {
        "key": "cmd+r",
        "command": "editor.action.startFindReplaceAction",
        "when": "editorFocus || editorIsOpen"
    },
    // Go to line to cmd+l
    {
        "key": "cmd+l",
        "command": "workbench.action.gotoLine"
    },
    // Reset zoom with cmd+0 instead of numpad 0
    {
        "key": "cmd+0",
        "command": "workbench.action.zoomReset"
    },
    // When terminal focused cmd+n new terminal, cmd+w close terminal
    {
        "key": "cmd+n",
        "command": "workbench.action.terminal.new",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    // Same as ctrl-tab which is harder to reach for me
    {
        "key": "alt+tab",
        //"command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },
    {
        "key": "alt+shift+tab",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        // "command": "workbench.action.quickOpenLeastRecentlyUsedEditor",
        "when": "!inEditorsPicker"
    },
    {
        "key": "alt+tab",
        "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "alt+shift+tab",
        "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    // Switch buffer to something more like that
    {
        "key": "ctrl+x b",
        "command": "workbench.action.showAllEditors"
        //"command": "workbench.action.quickOpen"
        //"command": "workbench.action.openPreviousEditorFromHistory"
        //"command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+x ctrl+b",
        "command": "workbench.action.showAllEditorsByMostRecentlyUsed",
    },
    // Rearrange editor order in group
    {
        "key": "shift+cmd+alt+]",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "shift+cmd+alt+[",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    // Move editor to another group
    {
        "key": "cmd+alt+]",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "cmd+alt+[",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    // so I can close terminal after running test with emacs like keybinding
    {
        "key": "ctrl+g",
        "command": "workbench.action.togglePanel",
        "when": "panelVisible"
    },
    // Open from File Explorer with enter instead of cmd+down
    // and use both plain enter and Ctrl+enter (because I'm already holding ctrl for up/down navigation)
    {
        "key": "ctrl+enter",
        "command": "explorer.openAndPassFocus",
        "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+enter",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "enter",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus"
    },
    {
        "key": "enter",
        "command": "list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "cmd+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "cmd+4",
        "command": "workbench.view.explorer",
        "when": "viewContainer.workbench.view.explorer.enabled"
    },
    {
        "key": "cmd+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "cmd+9",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "cmd+8",
        "command": "workbench.panel.output.focus"
    },
    {
        "key": "cmd+7",
        "command": "workbench.panel.markers.view.focus"
    },
    {
        "key": "cmd+6",
        "command": "workbench.debug.action.focusRepl"
    },
    // Next problem in files instead of just next in current file
    {
        "key": "ctrl+x `",
        "command": "editor.action.marker.nextInFiles",
        "when": "editorTextFocus"
    },
    // In quick open second entry is default, Emacs like
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpenPreviousEditor"
    },
    {
        "key": "cmd+p",
        "command": "-workbench.action.quickOpen"
    },
    // Emacs like extended command
    {
        "key": "ctrl+x m",
        "command": "workbench.action.showCommands",
    },
    // Emacs like file open
    // {
    //     "key": "ctrl+x f",
    //     "command": "quick-file-browser.open"
    // },
    // {
    //     "key": "ctrl+x ctrl+f",
    //     "command": "quick-file-browser.open"
    // },
    // {
    //     "key": "ctrl-x f",
    //     "command": "find-it-faster.findFiles"
    // },
    {
        "key": "ctrl-x ctrl-f",
        "command": "find-it-faster.findFiles"
    },
    {
        "key": "ctrl-x ctrl-g",
        "command": "find-it-faster.findWithinFiles"
    },
    {
        "key": "shift+cmd+]",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "shift+cmd+[",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "cmd+]",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+[",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "cmd+d",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    // disable emacs extension isearch
    {
        "key": "ctrl+s",
        "command": "-emacs-mcx.isearchForward",
        "when": "!findInputFocussed"
    },
    {
        "key": "ctrl+s",
        "command": "-editor.action.nextMatchFindAction",
        "when": "findInputFocussed"
    },
    {
        "key": "ctrl+s",
        "command": "-notebook.find",
        "when": "notebookEditorFocused && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+r",
        "command": "-emacs-mcx.isearchBackward",
        "when": "!findInputFocussed"
    },
    {
        "key": "ctrl+r",
        "command": "-editor.action.previousMatchFindAction",
        "when": "findInputFocussed"
    },
    {
        "key": "ctrl+r",
        "command": "-notebook.find",
        "when": "notebookEditorFocused && activeEditor == 'workbench.editor.interactive' || notebookEditorFocused && activeEditor == 'workbench.editor.notebook'"
    }
]
